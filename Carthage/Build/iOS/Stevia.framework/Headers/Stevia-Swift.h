// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSObject (SWIFT_EXTENSION(Stevia))
- (void)on:(NSString * _Nonnull)event :(void (^ _Nonnull)(void))callback;
@end


@interface UIButton (SWIFT_EXTENSION(Stevia))
/// Sets the title of the button for normal State
/// Essentially a shortcut for <code>setTitle("MyText", forState: .Normal)</code>
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)text:(NSString * _Nonnull)t;
/// Sets the localized key for the button’s title in normal State
/// Essentially a shortcut for <code>setTitle(NSLocalizedString("MyText", comment: "") , forState: .Normal)</code>
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)textKey:(NSString * _Nonnull)t;
/// Sets the image of the button in normal State
/// Essentially a shortcut for <code>setImage(UIImage(named:"X"), forState: .Normal)</code>
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)image:(NSString * _Nonnull)s;
@end


@interface UIButton (SWIFT_EXTENSION(Stevia))
/// Links UIButton tap (TouchUpInside) event to a block.
/// Example Usage:
/// \code
/// button.tap {
///     // do something
/// }
///
/// \endcodeOr
/// \code
/// button.tap(doSomething)
///
/// // later
/// func doSomething() {
///     // ...
/// }
///
/// \endcode\code
/// - Returns: Itself for chaining purposes
///
/// \endcode
- (UIButton * _Nonnull)tap:(void (^ _Nonnull)(void))block;
///
- (void)tapped;
@end

@class UIView;

@interface UICollectionViewCell (SWIFT_EXTENSION(Stevia))
/// Defines the view hierachy for the view.
/// Esentially, this is just a shortcut to <code>contentView.addSubview</code>
/// and ‘translatesAutoresizingMaskIntoConstraints = false’
/// \code
/// class PhotoCollectionViewCell: UICollectionViewCell {
///
/// var avatar = UIImageView()
/// var name = UILabel()
/// var followButton = UIButton()
///
///
/// required init?(coder aDecoder: NSCoder) { fatalError("init(coder:) has not been implemented") }
/// override init(frame: CGRect) {
/// super.init(frame: frame)
///
///     sv(
///        avatar,
///        name,
///        followButton
///     )
/// ...
///
/// }
/// }
///
/// \endcode
/// returns:
/// Itself to enable nested layouts.
- (UIView * _Nonnull)sv:(NSArray<UIView *> * _Nonnull)subViews;
@end


@interface UIImageView (SWIFT_EXTENSION(Stevia))
/// Sets the image of the imageView but in a chainable fashion
/// Essentially a shortcut for <code>image = UIImage(named: "X")</code>
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)image:(NSString * _Nonnull)t;
@end


@interface UILabel (SWIFT_EXTENSION(Stevia))
/// Sets the label text but in a chainable fashion
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)text:(NSString * _Nonnull)t;
/// Sets the label localization key but in a chainable fashion
/// Essentially a shortcut for <code>text = NSLocalizedString("X", comment: "")</code>
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)textKey:(NSString * _Nonnull)t;
@end


@interface UITableViewCell (SWIFT_EXTENSION(Stevia))
/// Defines the view hierachy for the view.
/// Esentially, this is just a shortcut to <code>contentView.addSubview</code>
/// and ‘translatesAutoresizingMaskIntoConstraints = false’
/// \code
/// class NotificationCell: UITableViewCell {
///
///    var avatar = UIImageView()
///    var name = UILabel()
///    var followButton = UIButton()
///
///     required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) }
///     override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
///     super.init(style: style, reuseIdentifier: reuseIdentifier) {
///
///         sv(
///            avatar,
///            name,
///            followButton
///        )
///    ...
///
///    }
/// }
///
/// \endcode
/// returns:
/// Itself to enable nested layouts.
- (UIView * _Nonnull)sv:(NSArray<UIView *> * _Nonnull)subViews;
@end


@interface UITextField (SWIFT_EXTENSION(Stevia))
/// Sets the textfield placeholder but in a chainable fashion
///
/// returns:
/// Itself for chaining purposes
- (nonnull instancetype)placeholder:(NSString * _Nonnull)t;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
/// Defines the view hierachy for the view.
/// Esentially, this is just a shortcut to <code>addSubview</code>
/// and ‘translatesAutoresizingMaskIntoConstraints = false’
/// \code
/// class MyView: UIView {
///
/// let email = UITextField()
/// let password = UITextField()
/// let login = UIButton()
///
///     convenience init() {
///     self.init(frame: CGRect.zero)
///     
///     sv(
///        email,
///        password,
///        login
///     )
/// ...
///
/// }
/// }
///
///
/// \endcode
/// returns:
/// Itself to enable nested layouts.
- (UIView * _Nonnull)sv:(NSArray<UIView *> * _Nonnull)subViews;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
/// Makes a view follow another view’s frame.
/// For instance if we want a button to be on top of an image :
/// \code
/// button.followEdges(image)
///
/// \endcode
- (void)followEdges:(UIView * _Nonnull)otherView;
/// Enforce a view to keep height and width equal at all times, essentially
/// forcing it to be a square.
/// \code
/// image.heightEqualsWidth()
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)heightEqualsWidth;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
/// Centers the view in its container.
/// \code
/// button.centerInContainer()
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)centerInContainer;
/// Centers the view horizontally (X axis) in its container.
/// \code
/// button.centerHorizontally()
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)centerHorizontally;
/// Centers the view vertically (Y axis) in its container.
/// \code
/// button.centerVertically()
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)centerVertically;
/// Centers the view horizontally (X axis) in its container, with an offset
/// \code
/// button.centerHorizontally(40)
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)centerHorizontally:(CGFloat)offset;
/// Centers the view vertically (Y axis) in its container, with an offset
/// \code
/// button.centerVertically(40)
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)centerVertically:(CGFloat)offset;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
/// Adds an Autolayout constraint for sizing the view.
/// \code
/// image.size(100)
/// image.size(100%)
///
/// // is equivalent to
///
/// image.width(100).height(100)
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)size:(CGFloat)points;
/// Adds an Autolayout constraint for setting the view’s height.
/// \code
/// image.height(100)
///
/// // is equivalent to
///
/// image ~ 100
///
/// // Flexible margins
/// image.height(<=100)
/// image.height(>=100)
/// image.height(100%)
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)height:(CGFloat)points;
/// Adds an Autolayout constraint for setting the view’s width.
/// \code
/// image.width(100)
/// image.width(<=100)
/// image.width(>=100)
/// image.width(100%)
///
/// \endcode
/// returns:
/// Itself, enabling chaining,
- (UIView * _Nonnull)width:(CGFloat)points;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
/// Adds the constraints needed for the view to fill its <code>superview</code>.
/// A padding can be used to apply equal spaces between the view and its superview
- (void)fillContainer:(CGFloat)padding;
- (UIView * _Nonnull)fillVWithM:(CGFloat)points SWIFT_WARN_UNUSED_RESULT;
/// Adds the constraints needed for the view to fill its <code>superview</code> Vertically.
/// A padding can be used to apply equal spaces between the view and its superview
- (UIView * _Nonnull)fillVerticallyWithM:(CGFloat)points;
- (UIView * _Nonnull)fillHWithM:(CGFloat)points SWIFT_WARN_UNUSED_RESULT;
/// Adds the constraints needed for the view to fill its <code>superview</code> Horizontally.
/// A padding can be used to apply equal spaces between the view and its superview
- (UIView * _Nonnull)fillHorizontallyWithM:(CGFloat)points;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
/// Sets the left margin for a view.
/// Example Usage :
/// \code
/// label.left(20)
/// label.left(<=20)
/// label.left(>=20)
/// label.left(20%)
///
/// - Returns: Itself for chaining purposes
///
/// \endcode
- (UIView * _Nonnull)left:(CGFloat)points;
/// Sets the right margin for a view.
/// Example Usage :
/// \code
/// label.right(20)
/// label.right(<=20)
/// label.right(>=20)
/// label.right(20%)
///
/// - Returns: Itself for chaining purposes
///
/// \endcode
- (UIView * _Nonnull)right:(CGFloat)points;
/// Sets the top margin for a view.
/// Example Usage :
/// \code
/// label.top(20)
/// label.top(<=20)
/// label.top(>=20)
/// label.top(20%)
///
/// \endcode
/// returns:
/// Itself for chaining purposes
- (UIView * _Nonnull)top:(CGFloat)points;
/// Sets the bottom margin for a view.
/// Example Usage :
/// \code
/// label.bottom(20)
/// label.bottom(<=20)
/// label.bottom(>=20)
/// label.bottom(20%)
///
/// \endcode
/// returns:
/// Itself for chaining purposes
- (UIView * _Nonnull)bottom:(CGFloat)points;
@end

@class NSLayoutConstraint;

@interface UIView (SWIFT_EXTENSION(Stevia))
/// Gets the left constraint if found.
/// Example Usage for changing left margin of a label :
/// \code
/// label.leftConstraint?.constant = 10
///  
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
///
/// \endcode
/// returns:
/// The left NSLayoutConstraint if found.
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable leftConstraint;
/// Gets the right constraint if found.
/// Example Usage for changing right margin of a label :
/// \code
/// label.rightConstraint?.constant = 10
///  
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
///
/// \endcode
/// returns:
/// The right NSLayoutConstraint if found.
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable rightConstraint;
/// Gets the top constraint if found.
/// Example Usage for changing top margin of a label :
/// \code
/// label.topConstraint?.constant = 10
///  
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
///
/// \endcode
/// returns:
/// The top NSLayoutConstraint if found.
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable topConstraint;
/// Gets the bottom constraint if found.
/// Example Usage for changing bottom margin of a label :
/// \code
/// label.bottomConstraint?.constant = 10
///
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
///
/// \endcode\code
/// - Returns: The bottom NSLayoutConstraint if found.
///
/// \endcode
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable bottomConstraint;
/// Gets the height constraint if found.
/// Example Usage for changing height property of a label :
/// \code
/// label.heightConstraint?.constant = 10
///  
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
///
/// \endcode
/// returns:
/// The height NSLayoutConstraint if found.
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable heightConstraint;
/// Gets the width constraint if found.
/// \code
/// Example Usage for changing width property of a label :
///
/// ```
/// label.widthConstraint?.constant = 10
///
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
/// ```
/// - Returns: The width NSLayoutConstraint if found.
///
/// \endcode
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable widthConstraint;
/// Gets the trailing constraint if found.
/// \code
/// Example Usage for changing width property of a label :
///
/// ```
/// label.trailingConstraint?.constant = 10
///
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
/// ```
/// - Returns: The trailing NSLayoutConstraint if found.
///
/// \endcode
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable trailingConstraint;
/// Gets the leading constraint if found.
/// \code
/// Example Usage for changing width property of a label :
///
/// ```
/// label.leadingConstraint?.constant = 10
///
/// // Animate if needed
/// UIView.animateWithDuration(0.3, animations:layoutIfNeeded)
/// ```
/// - Returns: The leading NSLayoutConstraint if found.
///
/// \endcode
@property (nonatomic, readonly, strong) NSLayoutConstraint * _Nullable leadingConstraint;
@end


@interface UIView (SWIFT_EXTENSION(Stevia))
@end

#pragma clang diagnostic pop
